name: CI

on:
  push:
    branches: [ main, envoyou/** ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      full_regression:
        description: "Run full regression (ENVOYOU_RUN_ALL_TESTS=true)"
        required: false
        default: "false"

jobs:
  tests:
    runs-on: ubuntu-latest
    env:
      ENVOYOU_RUN_ALL_TESTS: ${{ github.event.inputs.full_regression || 'false' }}
      PYTHONDONTWRITEBYTECODE: 1
      # Required for app.config.Settings and Supabase middleware during import
      JWT_SECRET_KEY: test_jwt_secret_for_ci
      SUPABASE_JWT_SECRET: test_supabase_secret_for_ci
      # Optional: ensure API keys available for endpoints requiring keys
      API_KEYS: demo_key_basic_2025:Demo Basic:basic,demo_key_premium_2025:Demo Premium:premium
      # Postgres service credentials (exposed to job steps so DATABASE_URL can be constructed)
      POSTGRES_USER: envoyou
  POSTGRES_PASSWORD: ${{ secrets.CI_POSTGRES_PASSWORD }}
      POSTGRES_DB: envoyou
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: envoyou
          POSTGRES_PASSWORD: ${{ secrets.CI_POSTGRES_PASSWORD }}
          POSTGRES_DB: envoyou
        # Intentionally omitting Docker service options/health-cmd here because
        # passing a health-cmd with flags can be parsed as docker CLI flags
        # on some runners. We use an explicit "Wait for Postgres" step below
        # that runs `pg_isready` to ensure the DB is ready before migrations/tests.
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Wait for Postgres
        run: |
          # Simple loop to wait for Postgres to be ready
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U envoyou && break || sleep 1
          done
      - name: Run Alembic migrations
        env:
          DB_USER: ${{ job.services.postgres.credentials.username }}
          DB_PASS: ${{ job.services.postgres.credentials.password }}
          DB_NAME: ${{ job.services.postgres.credentials.database }}
        run: |
          proto_a='postgres'
          proto_b='ql://'
          export DATABASE_URL="${proto_a}${proto_b}${DB_USER}:${DB_PASS}@localhost:5432/${DB_NAME}"
          echo "Running alembic upgrade head against $DATABASE_URL"
          alembic upgrade head
      - name: Run tests (Envoyou-focused by default)
        env:
          DB_USER: ${{ job.services.postgres.credentials.username }}
          DB_PASS: ${{ job.services.postgres.credentials.password }}
          DB_NAME: ${{ job.services.postgres.credentials.database }}
        run: |
          # Build DATABASE_URL at runtime (split the prefix to avoid literal credential patterns in the file)
          proto_a='postgres'
          proto_b='ql://'
          export DATABASE_URL="${proto_a}${proto_b}${DB_USER}:${DB_PASS}@localhost:5432/${DB_NAME}"
          echo "Using DATABASE_URL=${DATABASE_URL}"
          pytest -q
